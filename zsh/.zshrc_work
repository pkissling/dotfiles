# misc
export BOSCHUSER="kip1mu20"

# aliases
alias goodmorning="mfa && up"
alias live='function _live() { venv; ~/Coding/work/operations/miscellaneous/sast_live_acquire_access.sh $1; deactivate}; _live'
alias mfa="unlock_aws_vault_keychain && ~/Coding/work/operations/miscellaneous/sast_temporary_mfa_credentials.sh"
alias mfa-vault="unlock_aws_vault_keychain && ~/Coding/work/operations/miscellaneous/sast_temporary_mfa_credentials.sh -a sast-vault"
alias prometheus="kubectl -n monitoring port-forward svc/ecosystem-prometheus 9090"
alias prometheus-kube="kubectl -n monitoring port-forward svc/kube-prometheus-stack-prometheus 9090"
alias tickets="jira issues list --assignee $(jira me) --jql \"project IN (BOSS, Infrastructure, 'Ecosystem Backlog') AND status IN (Inprogress, 'In Progress', IN-PROGRESS)\""
alias ump='cd ~/Coding/work/ump-aa && ./gradlew localComposeUp && ./gradlew bootRun'
alias unlock_aws_vault_keychain='security unlock-keychain -p $(op item get "aws-vault Keychain" --vault "Azena" --fields label=password --format json | jq -r ".value") ~/Library/Keychains/aws-vault.keychain-db'
alias venv="source ~/Coding/work/operations/python/venv/bin/activate"
alias unlive="(aws sts get-caller-identity --profile sast-pilcrow-dev_Developer > /dev/null || ~/Coding/work/operations/miscellaneous/sast_temporary_mfa_credentials.sh) && venv && ~/Coding/work/operations/miscellaneous/sast_live_release_access.sh && deactivate"

# functions
function credfzf() {
  PROFILE_PREFIX="$(echo "sast-pilcrow-dev\nsast-pilcrow-demo\nsast-pilcrow-live\nsast-project\n" | fzf)"
  SELECTION=$(credstash -p "${PROFILE_PREFIX}"_Developer list | awk '{print $1}' | uniq | fzf | head -n 1)
  STACK_PREFIX=$(echo "${SELECTION}" | cut -d "/" -f 1)
  if [[ "${STACK_PREFIX}" =~ "stack_" ]]; then
    STACK="stack=${STACK_PREFIX/stack_/}"
  else
    STACK=""
  fi
  KEY=$(echo "${SELECTION}" | cut -d "/" -f 2 | cut -d " " -f 1)
  PASSWORD=$(credstash -p "${PROFILE_PREFIX}"_Developer get "${STACK_PREFIX}"/"${KEY}" $STACK)
  echo Password for "[${KEY}"] is: "${PASSWORD}"
}

function db {
  kubectx
  local deployment_ns=$(kubectl get deployments -A -o json | jq -r '.items[] | select(.metadata.name | test("db-forwarder$")) | "\(.metadata.namespace)/\(.metadata.name)"' | fzf)
  [ -z "$deployment_ns" ] && return  # Exit if no selection

  local namespace="${deployment_ns%/*}"
  local deployment="${deployment_ns#*/}"

  # Look up the first container port defined on the deployment
  local remote_port=$(kubectl get deployment "$deployment" -n "$namespace" -o json \
    | jq -r '[.spec.template.spec.containers[].ports[]? | .containerPort] | first')

  if [ -z "$remote_port" ] || [ "$remote_port" = "null" ]; then
    echo "Could not determine container port for ${namespace}/${deployment}"
    return 1
  fi

  echo "Forwarding local 3320 to ${namespace}/${deployment}:${remote_port}"
  kubectl port-forward deployment/$deployment -n $namespace 3320:$remote_port
}

# claude
export CLAUDE_CODE_USE_VERTEX=1
export ANTHROPIC_VERTEX_PROJECT_ID=rbprj-100357
export GOOGLE_APPLICATION_CREDENTIALS=~/.claude/gcloud-credentials.json
export CLOUD_ML_REGION=global
